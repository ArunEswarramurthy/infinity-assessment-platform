const { QuestionBank, Question } = require('../models');

// Simple AI-like question generation (mock implementation)
function generateMockQuestions(prompt, numQuestions) {
  const sampleQuestions = [
    {
      questionText: `What is the main concept related to ${prompt}?`,
      optionA: "Option A related to the topic",
      optionB: "Option B related to the topic", 
      optionC: "Option C related to the topic",
      optionD: "Option D related to the topic",
      correctOption: "A",
      explanation: `This relates to the fundamental concepts of ${prompt}`
    },
    {
      questionText: `Which of the following best describes ${prompt}?`,
      optionA: "First description",
      optionB: "Second description",
      optionC: "Third description", 
      optionD: "Fourth description",
      correctOption: "B",
      explanation: `This is the most accurate description of ${prompt}`
    },
    {
      questionText: `What is an important application of ${prompt}?`,
      optionA: "Application A",
      optionB: "Application B",
      optionC: "Application C",
      optionD: "Application D",
      correctOption: "C",
      explanation: `This application is commonly used in ${prompt}`
    }
  ];
  
  // Generate questions based on the prompt
  const questions = [];
  for (let i = 0; i < Math.min(numQuestions, 10); i++) {
    const baseQuestion = sampleQuestions[i % sampleQuestions.length];
    questions.push({
      ...baseQuestion,
      questionText: baseQuestion.questionText.replace(/\$\{prompt\}/g, prompt),
      explanation: baseQuestion.explanation.replace(/\$\{prompt\}/g, prompt)
    });
  }
  
  return questions;
}

exports.generateQuiz = async (req, res) => {
  try {
    const { prompt, numQuestions = 5 } = req.body;
    
    if (!prompt || !prompt.trim()) {
      return res.status(400).json({ 
        success: false, 
        message: 'Prompt is required' 
      });
    }
    
    // Generate mock questions (replace with actual AI integration)
    const questions = generateMockQuestions(prompt.trim(), numQuestions);
    
    res.json({ 
      success: true, 
      questions,
      message: `Generated ${questions.length} questions successfully`
    });
  } catch (error) {
    console.error('Quiz generation error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to generate quiz',
      error: error.message 
    });
  }
};

exports.saveAsSample = async (req, res) => {
  try {
    const { questions, topic } = req.body;
    
    if (!questions || !Array.isArray(questions) || questions.length === 0) {
      return res.status(400).json({ 
        success: false, 
        message: 'Questions array is required' 
      });
    }
    
    // Create or find question bank
    const [questionBank] = await QuestionBank.findOrCreate({
      where: { name: `AI Generated - ${topic}` },
      defaults: {
        name: `AI Generated - ${topic}`,
        description: `Questions generated by AI for topic: ${topic}`,
        isActive: true
      }
    });
    
    // Save questions to database
    const savedQuestions = [];
    for (const q of questions) {
      const question = await Question.create({
        questionText: q.questionText,
        optionA: q.optionA,
        optionB: q.optionB,
        optionC: q.optionC,
        optionD: q.optionD,
        correctOption: q.correctOption,
        explanation: q.explanation,
        questionBankId: questionBank.id
      });
      savedQuestions.push(question);
    }
    
    res.json({ 
      success: true, 
      message: `Saved ${savedQuestions.length} questions to sample database`,
      questionBankId: questionBank.id
    });
  } catch (error) {
    console.error('Save sample error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to save questions',
      error: error.message 
    });
  }
};